#ifndef __24L01_H__
#define __24L01_H__

#include "spi.h"
#include "main.h"

#define NRF_TAKE_RING 0x0b
#define NRF_ROBOT_LOCK 0x0a
#define NRF_Laser_Loc   0x08
#define NRF_HAND_CTRL 0x0c

//can指令宏定义

#define RESPOND_ID                   0xFE

//这两个ID分别用于标明夹取秧苗完成，用于指示主控进行下一个跑点操作
#define     RESPOND_GET_SIGAL           0xF1
#define     RESPOND_SET_SIGAL           0xF2

//这四个ID分别用于秧苗左右两边的夹取和放置
#define COMMAND_GET_SIGAL_LEFT_ID    0xF3
#define COMMAND_GET_SIGAL_RIGHT_ID   0xF4
#define COMMAND_SET_SIGAL_LEFT_ID    0xF5
#define COMMAND_SET_SIGAL_RIGHT_ID   0xF6

//这3个ID分别用于表明投球动作的完成，用于指示主控进行下一个跑点操作
#define RESPOND_SHOOT_SPD           0xE1
#define RESPOND_SHOOT_SIGAL         0xE2
#define RESPOND_CLAW_POS            0xE3

//这3个ID分别用于投球动作的指令
#define OPEN_ELETHREAR_ID           0xE4
#define COLLECT_BALL                0XE5
#define CLOSE_ELETHREAD             0xE6
#define SHOOT_SPD                   0xE7
#define BALL_SPD                    0xE8



#define       TAKE_SEEDLING      0X01
#define       MANUAL_MOVE        0X02
#define       POINT1             0X03
#define       POINT2             0X04


typedef struct
{
    int16_t lx;
    int16_t ly;
    int16_t rx;
    int16_t ry;
}RockerValStruct; // 摇杆值结构体

typedef struct
{
    uint8_t command;
    uint8_t last_command;
    uint8_t speed;

    int16_t ball_up;
    int16_t ball_shoot;

    int16_t ball_up_last;
    int16_t ball_shoot_last;
}order_val;

typedef struct
{
    float  target;
    float  kp;
    float  ki;
    float  kd;
    uint8_t maxout;
    uint8_t deadband;
    uint8_t intergralLimit;
    uint8_t integralSeparation;
    uint8_t  differentiationLimit;
}remote_pid;

typedef struct
{
    float  param1;
    float  param2;
    float  param3;
    float  param4;
    float  param5;
    float  param6;
    float  param7;
    float  param8;
    uint8_t  param9;
}dog_param;


extern uint16_t midValue;

// NRF24L01????????????????
#define TX_ADR_WIDTH 5    // 5?????????
#define RX_ADR_WIDTH 5    // 5?????????


#define TX_PLOAD_WIDTH 32 // 32?????????????0+
#define RX_PLOAD_WIDTH 32//10    // 32?????????????

// NRF24L01?????????????
#define NRF_READ_REG 0x00  //?????ü????,??5λ?????????
#define NRF_WRITE_REG 0x20 //д???ü????,??5λ?????????
#define RD_RX_PLOAD 0x61   //??RX??Ч????,1~32???
#define WR_TX_PLOAD 0xA0   //дTX??Ч????,1~32???
#define FLUSH_TX 0xE1      //???TX FIFO?????.??????????
#define FLUSH_RX 0xE2      //???RX FIFO?????.??????????
#define REUSE_TX_PL 0xE3   //????????????????,CE???,??????????????.
#define NOP 0xFF           //?????,?????????????????
// SPI(NRF24L01)????????
#define CONFIG 0x00     //???ü???????;bit0:1??????,0??????;bit1:?????;bit2:CRC??;bit3:CRC???;
// bit4:?ж?MAX_RT(?????????????ж?)???;bit5:?ж?TX_DS???;bit6:?ж?RX_DR???
#define EN_AA 0x01      //???????????  bit0~5,??????0~5
#define EN_RXADDR 0x02  //??????????,bit0~5,??????0~5
#define SETUP_AW 0x03   //?????????(???????????):bit1,0:00,3???;01,4???;02,5???;
#define SETUP_RETR 0x04 //??????????;bit3:0,????????????;bit7:4,????????? 250*x+86us
#define RF_CH 0x05      // RF???,bit6:0,??????????;
#define RF_SETUP 0x06   // RF?????;bit3:????????(0:1Mbps,1:2Mbps);bit2:1,???书??;bit0:???????????????
#define STATUS 0x07     //???????;bit0:TX FIFO?????;bit3:1,?????????????(???:6);bit4,?????????
// bit5:???????????ж?;bit6:?????????ж?;
#define MAX_TX 0x10     //???????????ж?
#define TX_OK 0x20      // TX????????ж?
#define RX_OK 0x40      //??????????ж?

#define OBSERVE_TX 0x08      //??????????,bit7:4,??????????????;bit3:0,?????????
#define CD 0x09              //??????????,bit0,??????;
#define RX_ADDR_P0 0x0A      //???????0??????,????5?????,????????
#define RX_ADDR_P1 0x0B      //???????1??????,????5?????,????????
#define RX_ADDR_P2 0x0C      //???????2??????,???????????,?????,?????RX_ADDR_P1[39:8]???;
#define RX_ADDR_P3 0x0D      //???????3??????,???????????,?????,?????RX_ADDR_P1[39:8]???;
#define RX_ADDR_P4 0x0E      //???????4??????,???????????,?????,?????RX_ADDR_P1[39:8]???;
#define RX_ADDR_P5 0x0F      //???????5??????,???????????,?????,?????RX_ADDR_P1[39:8]???;
#define TX_ADDR 0x10         //??????(????????),ShockBurstTM????,RX_ADDR_P0????????
#define RX_PW_P0 0x11        //???????????0??Ч??????(1~32???),?????0????
#define RX_PW_P1 0x12        //???????????1??Ч??????(1~32???),?????0????
#define RX_PW_P2 0x13        //???????????2??Ч??????(1~32???),?????0????
#define RX_PW_P3 0x14        //???????????3??Ч??????(1~32???),?????0????
#define RX_PW_P4 0x15        //???????????4??Ч??????(1~32???),?????0????
#define RX_PW_P5 0x16        //???????????5??Ч??????(1~32???),?????0????
#define NRF_FIFO_STATUS 0x17 // FIFO???????;bit0,RX FIFO?????????;bit1,RX FIFO?????;bit2,3,????
// bit4,TX FIFO????;bit5,TX FIFO?????;bit6,1,???????????????.0,?????;

extern uint8_t NRFHeartBeat;


void NRF24L01_SPI_Init(void);
void NRF24L01_RX_Mode(void);                                              //???????????
void NRF24L01_TX_Mode(void);                                              //???????????
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts); //д??????
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts);  //????????
uint8_t NRF24L01_Read_Reg(uint8_t reg);                                   //???????
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value);                   //д?????
uint8_t NRF24L01_Check(void);                                             //???24L01??????
uint8_t NRF24L01_TxPacket(uint8_t *txbuf);                                //???????????????
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf);                                //???????????????
void NRF24L01_TX_Mode(void);
void test_tx(void);
void test_rx(void);
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef *hspi, uint8_t byte);

#endif

